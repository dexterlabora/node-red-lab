[{"id":"a16cb8e.92cd148","type":"tab","label":"Flow 1"},{"id":"2261c613.84aa3a","type":"websocket-listener","path":"/ws/stations","wholemsg":"false"},{"id":"a65a04f9.a9bac8","type":"mongodb2","z":"a16cb8e.92cd148","uri":"mongodb://localhost:27017/test","name":"test","options":"","parallelism":"-1"},{"id":"693d0c77.754854","type":"mongodb2","z":"a16cb8e.92cd148","uri":"mongodb://localhost:27017/test","name":"test","options":"","parallelism":"-1"},{"id":"736eae77.9f91f","type":"http in","z":"a16cb8e.92cd148","name":"","url":"/clients","method":"get","swaggerDoc":"","x":130,"y":723.75,"wires":[["9edd8825.080b08","2d3470f5.bd9ac"]]},{"id":"6772f8af.384178","type":"http in","z":"a16cb8e.92cd148","name":"","url":"/clients/:mac","method":"get","swaggerDoc":"","x":150,"y":803.75,"wires":[["d4ce099a.c30138"]]},{"id":"3b381897.6a0578","type":"mongodb2 in","z":"a16cb8e.92cd148","service":"_ext_","configNode":"693d0c77.754854","name":"","collection":"cmxmapapi","operation":"findOne","x":410,"y":923.75,"wires":[["f19fe657.287e48","d4e443a8.0df05"]]},{"id":"1d1bfca7.568a63","type":"mongodb2 in","z":"a16cb8e.92cd148","service":"_ext_","configNode":"693d0c77.754854","name":"","collection":"cmxmapapi","operation":"find.toArray","x":520,"y":723.75,"wires":[["d90b265e.d0e848","ba937554.03e5a8"]]},{"id":"67cc5106.a7711","type":"debug","z":"a16cb8e.92cd148","name":"/clients/:mac","active":false,"console":"false","complete":"payload","x":730,"y":803.75,"wires":[]},{"id":"f19fe657.287e48","type":"debug","z":"a16cb8e.92cd148","name":"/clients/:mac - mongodb","active":false,"console":"false","complete":"payload","x":690,"y":963.75,"wires":[]},{"id":"d4e443a8.0df05","type":"http response","z":"a16cb8e.92cd148","name":"","x":750,"y":923.75,"wires":[]},{"id":"d90b265e.d0e848","type":"http response","z":"a16cb8e.92cd148","name":"","x":750,"y":723.75,"wires":[]},{"id":"d4ce099a.c30138","type":"function","z":"a16cb8e.92cd148","name":"msg.payload=msg.req.params.mac;","func":"//extract mac\nmsg.payload=msg.req.params.mac;\nreturn msg;\n","outputs":1,"noerr":0,"x":450,"y":803.75,"wires":[["67cc5106.a7711","28ef4bfe.ab8154"]]},{"id":"2d2461df.2900de","type":"comment","z":"a16cb8e.92cd148","name":"Log data","info":"","x":160,"y":443.75,"wires":[]},{"id":"d62802ec.a22a5","type":"function","z":"a16cb8e.92cd148","name":"build operation parameters: filter, update","func":"// This function updates/creates the client in the database\nvar filter = msg.payload;\nif (\"string\" == typeof filter) {\n  filter = JSON.parse(filter);\n}\n\nmsg.payload = [\n    {'name':msg.payload.name},\n    msg.payload,\n    {upsert:true}\n];\n\nreturn msg;\n","outputs":1,"noerr":0,"x":440,"y":503.75,"wires":[["888bdd38.90f6f"]]},{"id":"888bdd38.90f6f","type":"mongodb2 in","z":"a16cb8e.92cd148","service":"_ext_","configNode":"693d0c77.754854","name":"","collection":"cmxmapapi","operation":"findOneAndUpdate","x":430,"y":543.75,"wires":[["2ba3dce6.9580b4"]]},{"id":"2ba3dce6.9580b4","type":"debug","z":"a16cb8e.92cd148","name":"mongdb insert/update","active":false,"console":"false","complete":"payload","x":700,"y":543.75,"wires":[]},{"id":"94706057.f6d4","type":"function","z":"a16cb8e.92cd148","name":"Format Client","func":"// This function extracts the raw CMX data to create a consistent DB entry\nif(msg.payload === null){\n    return null;\n}\nvar map = msg.payload;\nclient = {}; //reset payload object for clarity\n\n\nif (map['version'] != '2.0'){\n    msg.log = \"got post with unexpected version: #{map['version']}\";\n    return msg;\n}else{\n    msg.log = \"working with correct version\";\n}\n/*\nif (map['type'] != 'DevicesSeen' || 'BluetoothDevicesSeen'){\nmsg.log = \"got post for event that we're not interested in: #{map['type']}\";\nreturn msg;\n}\n*/\n\nvar o = map['data']['observations'];\nconsole.log('map.data.apMac = '+map.data['apMac']);\n   for (var c in o){\n    if (o.hasOwnProperty(c)) {\n        //console.log(\"Key is \" + c + \", value is \" + o[c].location.lat);\n        if (!o[c]['location']){continue}\n        client.name = o[c]['clientMac'];\n        client.mac = o[c]['clientMac'];\n        client.lat = o[c]['location']['lat'];\n        client.lng = o[c]['location']['lng'];\n        client.unc = o[c]['location']['unc'];\n        client.seenString = o[c]['seenTime'];\n        client.seenEpoch = o[c]['seenEpoch'];\n        client.floors = map['data']['apFloors'] === null ? \"\" : map['data']['apFloors'].join;\n        client.manufacturer = o[c]['manufacturer'];\n        client.os = o[c]['os'];\n        client.ssid = o[c]['ssid'];\n        client.ap = map['data']['apMac'];\n        client.apTags = map['data']['apTags'];\n        client.type = map['type'] === \"BluetoothDevicesSeen\" ? \"Bluetooth\" : \"WiFi\";\n        msg.log = \"AP #{map['data']['apMac']} on #{map['data']['apFloors']}: #{c}\";\n        if (client.seenEpoch===null || client.seenEpoch === 0){continue}//  # This probe is useless, so ignore it\n        \n    }\n    msg.payload = client;\n    node.send(msg);\n   }\n\n   \nreturn msg;","outputs":1,"noerr":0,"x":360,"y":443.75,"wires":[["6b497a0d.575444","7474a668.f637d8","d62802ec.a22a5"]]},{"id":"6b497a0d.575444","type":"debug","z":"a16cb8e.92cd148","name":"format client","active":true,"console":"false","complete":"payload","x":730,"y":483.75,"wires":[]},{"id":"7640ba3b.e16774","type":"debug","z":"a16cb8e.92cd148","name":"/cmx3 Raw Data","active":false,"console":"false","complete":"payload","x":710,"y":603.75,"wires":[]},{"id":"9edd8825.080b08","type":"function","z":"a16cb8e.92cd148","name":"find({})","func":"// Create search for all clients\nmsg.payload = {};\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":723.75,"wires":[["1d1bfca7.568a63"]]},{"id":"28ef4bfe.ab8154","type":"function","z":"a16cb8e.92cd148","name":"msg.payload = {'name':msg.payload};","func":"msg.payload = {'name':msg.payload};\nreturn msg;","outputs":1,"noerr":0,"x":450,"y":863.75,"wires":[["3b381897.6a0578"]]},{"id":"2f9b33d8.d5710c","type":"function","z":"a16cb8e.92cd148","name":"CMX Sample Data","func":"msg.payload = {\n    \"version\": \"2.0\",\n    \"secret\": \"supersecret\",\n    \"type\": \"DevicesSeen\",\n    \"data\": {\n        \"apMac\": \"00:18:0a:13:dd:b0\",\n        \"apFloors\": [],\n        \"apTags\": [ \"\", \"home\", \"\" ],\n        \"observations\": [ { \n            \"ipv4\": \"/192.168.0.15\",\n            \"location\": {\n                \"lat\": 51.5355157,\n                \"lng\": -0.06990350000000944,\n                \"unc\": 1.1185886512767726,\n                \"x\": [], \"y\": [] \n                \n            },\n            \"seenTime\": \"2016-07-29T13:17:10Z\",\n            \"ssid\": \".interwebs\",\n            \"os\": \"Debian-based Linux\",\n            \"clientMac\": \"CC:CC:CC:CC:CC:CC\",\n            \"seenEpoch\": 1469798230,\n            \"rssi\": 48,\n            \"ipv6\": null,\n            \"manufacturer\": \"Edimax Technology\" \n            }, \n            { \n            \"ipv4\": null,\n            \"location\": {\n                \"lat\": 51.5133157,\n                \"lng\": -0.06890350000000944,\n                \"unc\": 49, \"x\": [],\n                \"y\": []\n                },\n            \"seenTime\": \"2016-07-29T13:17:07Z\",\n            \"ssid\": \"Hotspot-123\",\n            \"os\": \"fancyOS\",\n            \"clientMac\": \"DD:DD:DD:DD:DD:DD\",\n            \"seenEpoch\": 1469798227,\n            \"rssi\": 9,\n            \"ipv6\": null,\n            \"manufacturer\": \"Samsung(THAILAND)\"\n            }\n        ]\n    }\n};\nreturn msg;","outputs":1,"noerr":0,"x":370,"y":383.75,"wires":[["94706057.f6d4","c77213e1.89203"]]},{"id":"21cb80be.e7f04","type":"inject","z":"a16cb8e.92cd148","name":"Sample Client C D","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":150,"y":383.75,"wires":[["2f9b33d8.d5710c"]]},{"id":"c77213e1.89203","type":"debug","z":"a16cb8e.92cd148","name":"CMX Sample Raw Data","active":false,"console":"false","complete":"payload","x":690,"y":383.75,"wires":[]},{"id":"7474a668.f637d8","type":"debug","z":"a16cb8e.92cd148","name":"format client. info","active":true,"console":"false","complete":"info","x":710,"y":443.75,"wires":[]},{"id":"6c628487.61722c","type":"mongodb2 in","z":"a16cb8e.92cd148","service":"_ext_","configNode":"693d0c77.754854","name":"","collection":"cmxmapapi","operation":"find.toArray","x":413.75001525878906,"y":1021.2500171661377,"wires":[["126c41b1.c6aa0e"]]},{"id":"681b12e6.0e0f9c","type":"inject","z":"a16cb8e.92cd148","name":"List all clients","topic":"","payload":"{}","payloadType":"json","repeat":"","crontab":"","once":false,"x":123.75001525878906,"y":1021.2500171661377,"wires":[["6c628487.61722c"]]},{"id":"126c41b1.c6aa0e","type":"debug","z":"a16cb8e.92cd148","name":"List mongo data","active":true,"console":"false","complete":"true","x":733.7500152587891,"y":1021.2500171661377,"wires":[]},{"id":"ba937554.03e5a8","type":"debug","z":"a16cb8e.92cd148","name":"find({})","active":true,"console":"false","complete":"payload","x":750,"y":763.75,"wires":[]},{"id":"fa5c0533.04c2e8","type":"comment","z":"a16cb8e.92cd148","name":"Client Front-end API","info":"","x":130,"y":683.75,"wires":[]},{"id":"17b08238.0b942e","type":"comment","z":"a16cb8e.92cd148","name":"Receive CMX Data","info":"","x":130,"y":303.75,"wires":[]},{"id":"98f306f4.b8e0f8","type":"comment","z":"a16cb8e.92cd148","name":"Utilities","info":"","x":83.75001525878906,"y":981.2500171661377,"wires":[]},{"id":"9977962c.272658","type":"function","z":"a16cb8e.92cd148","name":"CMX Sample Data","func":"msg.payload = {\n    \"version\": \"2.0\",\n    \"secret\": \"supersecret\",\n    \"type\": \"DevicesSeen\",\n    \"data\": {\n        \"apMac\": \"00:18:0a:13:dd:b0\",\n        \"apFloors\": [],\n        \"apTags\": [ \"\", \"home\", \"\" ],\n        \"observations\": [ { \n            \"ipv4\": \"/192.168.0.15\",\n            \"location\": {\n                \"lat\": 51.5155157,\n                \"lng\": -0.06590350000000944,\n                \"unc\": 1.2185886512767726,\n                \"x\": [], \"y\": [] \n                \n            },\n            \"seenTime\": \"2016-07-29T13:17:10Z\",\n            \"ssid\": \".interwebs\",\n            \"os\": \"Debian-based Linux\",\n            \"clientMac\": \"AA:AA:AA:AA:AA:AA\",\n            \"seenEpoch\": 1469795230,\n            \"rssi\": 48,\n            \"ipv6\": null,\n            \"manufacturer\": \"Edimax Technology\" \n            }, \n            { \n            \"ipv4\": null,\n            \"location\": {\n                \"lat\": 51.5215157,\n                \"lng\": -0.069905350000000944,\n                \"unc\": 49, \"x\": [],\n                \"y\": []\n                },\n            \"seenTime\": \"2016-07-29T13:17:07Z\",\n            \"ssid\": null,\n            \"os\": null,\n            \"clientMac\": \"BB:BB:BB:BB:BB:BB\",\n            \"seenEpoch\": 1469598227,\n            \"rssi\": 9,\n            \"ipv6\": null,\n            \"manufacturer\": \"Samsung(THAILAND)\"\n            }\n        ]\n    }\n};\nreturn msg;","outputs":1,"noerr":0,"x":370,"y":343.75,"wires":[["94706057.f6d4"]]},{"id":"a1b7c4d.3210c38","type":"inject","z":"a16cb8e.92cd148","name":"Sample Client A B","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":150,"y":343.75,"wires":[["9977962c.272658"]]},{"id":"e3a4c6e2.54d998","type":"comment","z":"a16cb8e.92cd148","name":"Client Front-end Site - Websockets","info":"","x":168.75,"y":1265.000015258789,"wires":[]},{"id":"668c2269.0ef5fc","type":"comment","z":"a16cb8e.92cd148","name":"README","info":"#Cisco Meraki CMX API - Demo Map\nThis Flow is an example of how to use the Cisco Meraki CMX\nJSON feed to store clients into a database and track them\non a Google map.\n\nThere are three major components\n- CMX Receier\n- Front-end API\n- Front-end Website (Google MAP)\n\n\n##CMX Receier -\nThe CMX Receiver utilizes the Node-RED CMX node to collect\nJSON data from a Cisco Meraki network. This feed is generally\nupdated within 2 minutes. There are two Sample Clients feeds\nthat can be used to test the flow.\n\nOnce the data has been received, the JSON is parsed and\ncommitted to a MongoDB. Please ensure your MongoDB is running\nfor this flow to work properly.\n\n\n##Front-end API - \nThere are two [GET] HTTP routes that provide access to the \ncollected client data. These will be used by the front-end \nwebsite to pull the client information for all or specific\nclients. Fun Fact: You can also use these routes with Postman\nor a standard browser to pull the data directly.\n\n##Front-end Website - \nThis will provide the webpage to view the Google map and \ntrack clients.\nThe website can be viewed at\n`http://yourserver:1880/cmxapimap`\n\n#Setup\n- Configure a Cisco Meraki network to post the CMX JSON to\nyour listening URL. Example: `http://yourserver:1880/cmx`\n\n- Install and configure MongoDB. Then update the MongoDB2 \nnodes within your flow to match the appropriate settings.\nExample: `mongodb://localhost:27017/test`\n\n- Insert Sample Client information by pressing the blue\nbuttons for each. Note, this will place the clients in London\nby default. Remove these clients if you do not want to \nconfuse your map centering\n\nMore information can be found on the Meraki Developers portal\nhttp://developers.meraki.com/tagged/Location\n\n\nThis flow was created by \nCory Guynn\nSystems Engineer\nCisco Meraki \n2016\n\nFor other fun IoT projects\nhttp://www.InternetOfLEGO.com\n\nMIT License. \n\n","x":410,"y":223.75,"wires":[]},{"id":"963a5d68.f7bc5","type":"link in","z":"a16cb8e.92cd148","name":"","links":["75f8e265.4ffb6c"],"x":86.5,"y":541.75,"wires":[["94706057.f6d4","7640ba3b.e16774"]]},{"id":"a49b90df.c009","type":"mongodb2 in","z":"a16cb8e.92cd148","service":"_ext_","configNode":"693d0c77.754854","name":"","collection":"cmxmapapi","operation":"removeMany","x":422.75001525878906,"y":1065.2500171661377,"wires":[["ae90db59.0fadf8"]]},{"id":"3efa410.2104fc","type":"inject","z":"a16cb8e.92cd148","name":"DELETE all clients","topic":"","payload":"{}","payloadType":"json","repeat":"","crontab":"","once":false,"x":142.75001525878906,"y":1065.2500171661377,"wires":[["a49b90df.c009"]]},{"id":"ae90db59.0fadf8","type":"debug","z":"a16cb8e.92cd148","name":"DELETE mongo data","active":true,"console":"false","complete":"true","x":752.7500152587891,"y":1065.2500171661377,"wires":[]},{"id":"2d3470f5.bd9ac","type":"function","z":"a16cb8e.92cd148","name":"apTags contains IONIS","func":"msg.payload = {'apTags':{$in:['test']}};\nreturn msg;","outputs":1,"noerr":0,"x":367.5,"y":674.75,"wires":[[]]},{"id":"eb0a3ee0.2f3ce","type":"inject","z":"a16cb8e.92cd148","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":146.5,"y":633.75,"wires":[["2d3470f5.bd9ac"]]},{"id":"69e34e0f.656e8","type":"function","z":"a16cb8e.92cd148","name":"Format Client - BLE","func":"// This function extracts the raw CMX data to create a consistent DB entry\nif(msg.payload === null){\n    return null;\n}\nvar map = msg.payload;\nclient = {}; //reset payload object for clarity\n\n\nif (map['version'] != '2.0'){\n    msg.log = \"got post with unexpected version: #{map['version']}\";\n    return msg;\n}else{\n    msg.log = \"working with correct version\";\n}\n/*\nif (map['type'] != 'DevicesSeen' || 'BluetoothDevicesSeen'){\nmsg.log = \"got post for event that we're not interested in: #{map['type']}\";\nreturn msg;\n}\n*/\n\nvar o = map['data']['observations'];\nconsole.log('map.data.apMac = '+map.data['apMac']);\n   for (var c in o){\n    if (o.hasOwnProperty(c)) {\n        //console.log(\"Key is \" + c + \", value is \" + o[c].location.lat);\n        if (!o[c]['location']){continue}\n        client.name = o[c]['clientMac'];\n        client.mac = o[c]['clientMac'];\n        client.lat = o[c]['location']['lat'];\n        client.lng = o[c]['location']['lng'];\n        client.unc = o[c]['location']['unc'];\n        client.seenString = o[c]['seenTime'];\n        client.seenEpoch = o[c]['seenEpoch'];\n        client.floors = map['data']['apFloors'] === null ? \"\" : map['data']['apFloors'].join;\n        client.manufacturer = o[c]['manufacturer'];\n        client.os = o[c]['os'];\n        client.ssid = o[c]['ssid'];\n        client.ap = map['data']['apMac'];\n        client.apTags = map['data']['apTags'];\n        client.type = map['type'] === \"BluetoothDevicesSeen\" ? \"Bluetooth\" : \"WiFi\";\n        msg.log = \"AP #{map['data']['apMac']} on #{map['data']['apFloors']}: #{c}\";\n        if (client.seenEpoch===null || client.seenEpoch === 0){continue}//  # This probe is useless, so ignore it\n        \n    }\n    msg.payload = client;\n    node.send(msg);\n   }\n\n   \nreturn msg;","outputs":1,"noerr":0,"x":653.765625,"y":271.5,"wires":[[]]},{"id":"74b27bd6.ad0494","type":"http in","z":"a16cb8e.92cd148","name":"","url":"/map","method":"get","swaggerDoc":"","x":130.00000095367432,"y":1322.5000200793147,"wires":[["69b34009.0db24"]]},{"id":"616a3b92.b3c304","type":"http response","z":"a16cb8e.92cd148","name":"","x":607.7500066757202,"y":1329.5000200271606,"wires":[]},{"id":"582fc0a8.385ba","type":"http request","z":"a16cb8e.92cd148","name":"UPDATE SERVER","method":"GET","url":"http://34.248.68.218:1880/clients","tls":"","x":340.50000762939453,"y":1405.7500219345093,"wires":[["e6b5bba7.179238","6af696ce.71ca08"]]},{"id":"b3d874ec.406658","type":"websocket in","z":"a16cb8e.92cd148","name":"","server":"2261c613.84aa3a","client":"","x":147.50000762939453,"y":1406.7500219345093,"wires":[["582fc0a8.385ba"]]},{"id":"e2e5d9bb.e96958","type":"websocket out","z":"a16cb8e.92cd148","name":"","server":"2261c613.84aa3a","x":714.7500305175781,"y":1413.2499990463257,"wires":[]},{"id":"e6b5bba7.179238","type":"json","z":"a16cb8e.92cd148","name":"","x":540.6250381469727,"y":1411.250020980835,"wires":[["e2e5d9bb.e96958"]]},{"id":"6af696ce.71ca08","type":"debug","z":"a16cb8e.92cd148","name":"","active":true,"console":"false","complete":"false","x":689.3750305175781,"y":1482.4999990463257,"wires":[]},{"id":"69b34009.0db24","type":"template","z":"a16cb8e.92cd148","name":"Google Map","field":"payload","fieldType":"msg","format":"html","syntax":"mustache","template":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\n    <meta charset=\"utf-8\">\n    <title>Bart Stations</title>\n    <style>\n      html, body, #map-canvas {\n        height: 100%;\n        margin: 0px;\n        padding: 0px\n      }\n    </style>\n    <script src=\"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCWFVfLzjGaepofBse9sHFF-S-mtqVjzLA\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/markerclustererplus/2.1.4/markerclusterer.min.js\"></script>\n    <script>\n\t\tfunction initialize() {\n\t\t  var myLatlng = new google.maps.LatLng(37.765062,-122.419694);\n\t\t  var mapOptions = {\n\t\t    zoom: 10,\n\t\t    center: myLatlng\n\t\t  };\n\t\t  var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);\n\t\t  var markers = [];\n\t\t  var loc = window.location;\n          if (loc.protocol === \"https:\") {\n            newUri = \"wss:\";\n          } else {\n            newUri = \"ws:\";\n          }\n          newUri += \"//\" + loc.host + \"/ws/stations\";\n\t\t  \n\t\t  \n\t\t  var sock = new WebSocket(newUri);\n\t\t  sock.onopen = function(){ \n\t\t    console.log(\"Connected websocket\");\n\t\t    console.log(\"Sending ping..\");\n\t\t\tsock.send(\"Ping!\");\n\t\t    console.log(\"Ping sent..\");\n\t\t  };\n\t\t  sock.onerror = function(){ console.log(\"Websocket error\"); };\n\t\t  sock.onmessage = function(evt){\n\t\t    var clients = JSON.parse(evt.data);\n\t\t\tfor(var i = 0; i < clients.length; i++) {\n\t\t\t  var client = clients[i];\n              var marker = new google.maps.Marker({\n\t\t\t    position: new google.maps.LatLng(client.lat,client.lng),\n\t\t\t    map: map,\n\t\t\t    animation: google.maps.Animation.DROP,\n\t\t\t    title: client.name,\n\t\t\t    data: client\n\t\t\t  });\n\t\t\t markers.push(marker); \n\t\t\t}\n\t\t\t\n\t\t\tvar markerCluster = new MarkerClusterer(map, markers,\n                {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});\n\t\t    \n\t\t  };\n\t\t};\n\t\t\n\t\tgoogle.maps.event.addDomListener(window, 'load', initialize);\n\n    </script>\n  </head>\n  <body>\n    <div id=\"map-canvas\"></div>\n  </body>\n</html>","x":370.00000762939453,"y":1323.7500190734863,"wires":[["616a3b92.b3c304"]]}]